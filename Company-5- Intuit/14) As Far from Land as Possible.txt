class Solution {
    public int maxDistance(int[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][] = new boolean[m][n];

        for (int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    q.add(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        int max = Integer.MIN_VALUE;
        int[][] dirs={{0,1},{0,-1},{1,0},{-1,0}};
        while (!q.isEmpty()) {
            int temp[] = q.poll();
            for (int dir[] : dirs) {
                int x = temp[0] + dir[0];
                int y = temp[1] + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 1 || visited[x][y]) {
                    continue;
                }
                visited[x][y] = true;
                grid[x][y] = grid[temp[0]][temp[1]] + 1;
                max = Math.max(max, grid[x][y]);
                q.add(new int[]{x, y});
            }
        }
        return max == Integer.MIN_VALUE ? - 1 : max - 1;
    }
}