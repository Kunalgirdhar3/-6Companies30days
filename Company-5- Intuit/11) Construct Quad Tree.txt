/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    
    public Node() {
        this.val = false;
        this.isLeaf = false;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = topLeft;
        this.topRight = topRight;
        this.bottomLeft = bottomLeft;
        this.bottomRight = bottomRight;
    }
};
*/

class Solution {
    public Node construct(int[][] grid) {
        if(grid==null ||grid.length==0) return null;
        return helper(grid,0,grid.length-1,0,grid.length-1);
    }
    public Node helper(int[][] grid, int xs, int xe, int ys, int ye){
        if(xs==xe) return new Node(grid[xs][ys]==1,true);
        int xm=(xs+xe)/2;
        int ym=(ys+ye)/2;
        Node node = new Node();
        Node topLeft = helper(grid, xs, xm, ys, ym);
        Node bottomLeft = helper(grid, xm + 1, xe, ys, ym);
        Node topRight = helper(grid, xs, xm, ym + 1, ye);
        Node bottomRight = helper(grid, xm + 1, xe, ym + 1, ye);
        if (topLeft.isLeaf && bottomLeft.isLeaf && topRight.isLeaf && bottomRight.isLeaf && topLeft.val == bottomLeft.val && topLeft.val == topRight.val && topLeft.val == bottomRight.val) {
            node.val = topLeft.val;
            node.isLeaf = true;
        } else {
            node.topLeft = topLeft;
            node.bottomLeft = bottomLeft;
            node.topRight = topRight;
            node.bottomRight = bottomRight;
        }
        return node;
    }
}